this is very hard one to solve in O(n)
1) build a increased one way stack
2) if current element is grerater than stack[-1], append. 
3) if not, calculate the largest possible area for stack[-1], which is h = heights[stack[-1]], 
3) for w, since its increase stack, w is between curr_idx, and previous stack[-2](-2 is smaller then not include), 
3) thus we do stack.pop(), w = idx-stack[-1]-1. and continue
4) corner case is heights is always increase, so we append a 0 at the end to force trigger the calculation. 




class Solution(object):
    def largestRectangleArea(self, heights):
        """
        :type heights: List[int]
        :rtype: int
        """
        stack = [0]
        result = 0
        heights.append(0)
        for idx in range(len(heights)):
    
            if not stack or heights[stack[-1]]<heights[idx]:
                stack.append(idx)
            else:
                while stack and heights[stack[-1]]>heights[idx]:
                    h = heights[stack[-1]]
                    stack.pop()
                    if not stack:
                        w = idx
                    else:
                        w = idx-stack[-1]-1
                    result = max(result, h*w)
                stack.append(idx)
            
        return result
