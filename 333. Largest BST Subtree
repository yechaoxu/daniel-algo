# this solution goes from bottom up, and get the max/min range of all node under each node, resurvively check the condition, 
#if doesn't match, set max/min value to invalid bst and return subtree length
class Solution(object):
    def largestBSTSubtree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def _dfs(root):
            if not root:
                # return number of node, max value, min val. 
                # we want to use the max val from left, and min val from right to ensure it is a valid bst
                #       node, max val,    small val
                return [0, -sys.maxint, sys.maxint]
            else:
                leftdata = _dfs(root.left)
                rightdata = _dfs(root.right)
                
                if leftdata[1]< root.val < rightdata[2]:
                    # we need to check if smallest below this node, and largest , is still under the range
                    return [leftdata[0] + rightdata[0] +1, max(root.val,rightdata[1]), min(root.val,leftdata[2]) ]
                else:
                    return [max(leftdata[0], rightdata[0]) , sys.maxint, -sys.maxint]
        data = _dfs(root)
        return data[0]



# check each node if it is valid bst, then find the max nodes under it. very ineffcient

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def largestBSTSubtree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def validbst(root, minval, maxval):
            if not root:
                return True
            if minval < root.val < maxval:
                return validbst(root.left, minval, root.val) and validbst(root.right, root.val, maxval)
            
            else:
                return False
        
        def _count(root):
            if not root:
                return 0
            else:
                return 1+_count(root.left) + _count(root.right)
        
        
        if not root:
            return 0
        if validbst(root, -sys.maxint, sys.maxint):
            return _count(root)
        else:
            return max(self.largestBSTSubtree(root.left),self.largestBSTSubtree(root.right) )
