# basic dp question, no way to optimize, don't like this solution, it basiclly brute foce all possbile combs and iterrates over to the max value, 

class Solution(object):
    def longestArithSeqLength(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        from collections import defaultdict
        dp = dict()
        result = 0
        for i, num in enumerate(A):
            for j in range(0, i):
                diff = A[i] - A[j]    

                if (diff, j) not in dp:
                    dp[(diff,i)] = 2
                    result = max(result, 2)
                else:
                    dp[(diff,i)] = dp[(diff,j)] +1 
                    result = max(result, dp[(diff,i)])
        return result
