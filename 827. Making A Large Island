# this just have many steps, but nothing fancy, first you dfs and build a mapping with index and each island size, you also color each island with its idx
# 2nd you go over the 0s, and check 4 sourranding, put into set, and sum them up plus the that 0 slot. 
# then you go over all 0 with max(result,  in the end to prevent corner case you go over all the island make sure its not a single full 1 island.

class Solution(object):
    def largestIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        self.mapping = dict()
        self.size  =0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if not self.mapping:
                    idx = 100
                else:
                    idx = max(self.mapping.keys()) +1
                
                if grid[i][j] ==1:
                    self.dfs(grid, i, j,idx)
                    self.mapping[idx] = self.size
                    self.size = 0
        
        result = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                #found 0
                if grid[i][j] ==0:
                    seen = set()
                    for i_, j_ in ((i-1,j), (i+1,j), (i,j+1), (i, j-1)):
                        if 0<=i_<len(grid) and 0<=j_<len(grid[0]):
                            if grid[i_][j_] !=0:
                                seen.add(grid[i_][j_])
                    tmpsum = 1
                    for key in seen:
                        tmpsum+=self.mapping[key]
                    result = max(result, tmpsum)
        for k, v in self.mapping.items():
            result = max(result, v)
        return result

        
    def dfs(self,grid, i , j,idx):
        if i <0 or j <0 or i >= len(grid) or j >= len(grid[0]):
            return 
        if grid[i][j] !=1:
            return 
        self.size+=1
        grid[i][j] = idx
        self.dfs(grid,i-1, j,idx)
        self.dfs(grid,i+1, j,idx)
        self.dfs(grid,i, j-1,idx)
        self.dfs(grid,i, j+1,idx)
        
